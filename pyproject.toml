[tool.poetry]
name = "litestar-users"
version = "1.0.0rc3"
description = "Authentication and user management for Litestar"
authors = ["Michael Bosch <michael@lonelyviking.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "litestar_users"}]

[tool.poetry.dependencies]
python = "^3.8,<4.0"
passlib = "*"
litestar = { version = "^2.1.1", extras = ["jwt", "cli", "sqlalchemy"]}
python-jose = "*"
cryptography = "*"
argon2-cffi = "*"
pyyaml = "!=5.4.*"


[tool.poetry.group.dev.dependencies]
pytest = "*"
mkdocs = ">=1.4.2"
pre-commit = "^2.20.0"
uvicorn = "^0.22.0"
aiosqlite = "^0.17.0"
mkdocs-material = ">=8.5.11"
mkdocstrings = {extras = ["python"], version = ">=0.19.1"}
pytest-cov = "^4.0.0"
attrs = "^23.1.0"
asyncpg = "^0.28.0"
docker-compose = "^1.29.2"
pytest-asyncio = "^0.21.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'except ImportError as e:',
    'except ImportError:',
    '\.\.\.',
    'raise NotImplementedError'
]

[tool.pytest.ini_options]
addopts = "--ignore=examples"
asyncio_mode = "auto"

[tool.pyright]
include = ["litestar_users", "tests", "examples"]
exclude = [
    "litestar_users/adapter/sqlalchemy/mixins"
]

[tool.slotscheck]
strict-imports = false

[tool.ruff]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "D", # pydocstyle
    "DJ", # flake8-django
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle - warning
    "YTT", # flake8-2020
]
ignore = [
    "E501", # pycodestyle line too long, handled by black
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "D202", # pydocstyle - no blank lines allowed after function docstring
    "D205", # pydocstyle - 1 blank line required between summary line and description
    "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
    "UP037", # pyupgrade - removes quotes from type annotation
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010" # flake8-bugbear - do not call setattr with a constant attribute value
]
line-length = 120
src = ["litestar_users", "tests", "examples"]
target-version = "py38"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
    "sqlalchemy.ext.declarative.declared_attr",
    "sqlalchemy.orm.declared_attr.directive",
]

[tool.ruff.isort]
known-first-party = ["litestar_users", "tests", "examples"]

[tool.ruff.per-file-ignores]
"tests/**/*.*" = ["S101", "D", "ARG", "PGH", "B", "FBT", "PTH", "A", "TCH", "DTZ", "TRY", "EM", "S", "N", "SIM", "PLR", "BLE", "RSE", "C901", "PLW", "G", "PIE"]
"docs/examples/tests/**/*.*" = ["S101", "D", "ARG", "PGH", "B", "FBT", "PTH", "A", "TCH", "DTZ", "TRY", "EM", "S", "N", "SIM", "PLR", "BLE", "RSE", "C901", "PLW", "G", "PIE"]
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TCH", "ERA", "D", "RET"]
"litestar_users/exceptions.py" = ["N818"]
"litestar_users/route_handlers.py" = ["TCH001"]
"tests/integration/test_roles/conftest.py" = ["UP006"]
