{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Litestar-Users documentation","text":"<p>Litestar-Users is an authentication, authorization and user management package for Litestar v2.1.1 and above.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Session, JWT and JWTCookie authentication backends</li> <li>Customizable pre- and post-operation hooks</li> <li>Optional RBAC (Role based access control)</li> <li>Pre-configured route handlers for:</li> <li>Authentication</li> <li>Registration and verification</li> <li>Password recovery</li> <li>Administrative user and role management</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p><code>pip install litestar-users</code></p>"},{"location":"#full-example","title":"Full example","text":"<p>Example application code can be viewed here.</p>"},{"location":"reference/0-config/","title":"Litestar-Users Configuration","text":""},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig","title":"litestar_users.config.LitestarUsersConfig  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[UserT, RoleT]</code></p> <p>Configuration class for LitestarUsers.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.auth_exclude_paths","title":"auth_exclude_paths  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auth_exclude_paths = field(default_factory=lambda: ['/schema'])\n</code></pre> <p>Paths to be excluded from authentication checks.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.auth_backend_class","title":"auth_backend_class  <code>instance-attribute</code>","text":"<pre><code>auth_backend_class\n</code></pre> <p>The authentication backend to use by Litestar.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.auto_commit_transactions","title":"auto_commit_transactions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_commit_transactions = False\n</code></pre> <p>Whether to auto_commit transactions. Defaults to <code>False</code>.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.secret","title":"secret  <code>instance-attribute</code>","text":"<pre><code>secret\n</code></pre> <p>Secret string for securely signing tokens.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.hash_schemes","title":"hash_schemes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hash_schemes = field(default_factory=lambda: ['argon2'])\n</code></pre> <p>Schemes to use for password encryption.</p> <p>Defaults to <code>[\"argon2\"]</code></p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.session_backend_config","title":"session_backend_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>session_backend_config = None\n</code></pre> <p>Optional backend configuration for session based authentication.</p> Notes <ul> <li>Required if <code>auth_backend_class</code> is <code>SessionAuth</code>.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.user_model","title":"user_model  <code>instance-attribute</code>","text":"<pre><code>user_model\n</code></pre> <p>A subclass of a <code>User</code> ORM model.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.user_read_dto","title":"user_read_dto  <code>instance-attribute</code>","text":"<pre><code>user_read_dto\n</code></pre> <p>A <code>User</code> model based SQLAlchemy DTO class.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.user_update_dto","title":"user_update_dto  <code>instance-attribute</code>","text":"<pre><code>user_update_dto\n</code></pre> <p>A <code>User</code> model based SQLAlchemy DTO class.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.role_model","title":"role_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>role_model = None\n</code></pre> <p>A <code>Role</code> ORM model.</p> Notes <ul> <li>Required if <code>role_management_handler_config</code> is set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.role_create_dto","title":"role_create_dto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>role_create_dto = None\n</code></pre> <p>A <code>SQLAlchemyDTO</code> based on a <code>Role</code> ORM model.</p> Notes <ul> <li>Required if <code>role_management_handler_config</code> is set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.role_read_dto","title":"role_read_dto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>role_read_dto = None\n</code></pre> <p>A <code>SQLAlchemyDTO</code> based on a <code>Role</code> ORM model.</p> Notes <ul> <li>Required if <code>role_management_handler_config</code> is set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.role_update_dto","title":"role_update_dto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>role_update_dto = None\n</code></pre> <p>A <code>SQLAlchemyDTO</code> based on a <code>Role</code> ORM model.</p> Notes <ul> <li>Required if <code>role_management_handler_config</code> is set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.user_service_class","title":"user_service_class  <code>instance-attribute</code>","text":"<pre><code>user_service_class\n</code></pre> <p>A subclass of BaseUserService.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.require_verification_on_registration","title":"require_verification_on_registration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>require_verification_on_registration = True\n</code></pre> <p>Whether the registration of a new user requires verification. Defaults to <code>True</code>.</p>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.auth_handler_config","title":"auth_handler_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auth_handler_config = None\n</code></pre> <p>Optional instance of AuthHandlerConfig. If set, registers the route handler(s) on the app.</p> Notes <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.current_user_handler_config","title":"current_user_handler_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_user_handler_config = None\n</code></pre> <p>Optional current-user route handler configuration. If set, registers the route handler(s) on the app.</p> Notes <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.password_reset_handler_config","title":"password_reset_handler_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password_reset_handler_config = None\n</code></pre> <p>Optional password reset route handler configuration. If set, registers the route handler(s) on the app.</p> Notes <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.register_handler_config","title":"register_handler_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>register_handler_config = None\n</code></pre> <p>Optional registration/signup route handler configuration. If set, registers the route handler(s) on the app.</p> Notes <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.role_management_handler_config","title":"role_management_handler_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>role_management_handler_config = None\n</code></pre> <p>Optional role management route handler configuration. If set, registers the route handler(s) on the app.</p> Notes <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.user_management_handler_config","title":"user_management_handler_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_management_handler_config = None\n</code></pre> <p>Optional user management route handler configuration. If set, registers the route handler(s) on the app.</p> Notes <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#litestar_users.config.LitestarUsersConfig.verification_handler_config","title":"verification_handler_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>verification_handler_config = None\n</code></pre> <p>Optional user verification route handler configuration. If set, registers the route handler(s) on the app.</p> Notes <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/1-user-service/","title":"User Service","text":""},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService","title":"litestar_users.service.BaseUserService","text":"<p>               Bases: <code>Generic[SQLAUserT, SQLARoleT]</code></p> <p>Main user management interface.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.__init__","title":"__init__","text":"<pre><code>__init__(secret, user_auth_identifier, user_repository, hash_schemes=None, role_repository=None, require_verification_on_registration=True)\n</code></pre> <p>User service constructor.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>Secret string for securely signing tokens.</p> required <code>user_auth_identifier</code> <code>str</code> <p>The <code>User</code> model attribute to identify the user during authorization.</p> required <code>user_repository</code> <code>SQLAlchemyUserRepository[SQLAUserT]</code> <p>A <code>UserRepository</code> instance.</p> required <code>hash_schemes</code> <code>Sequence[str] | None</code> <p>Schemes to use for password encryption.</p> <code>None</code> <code>role_repository</code> <code>SQLAlchemyRoleRepository[SQLARoleT, SQLAUserT] | None</code> <p>A <code>RoleRepository</code> instance.</p> <code>None</code> <code>require_verification_on_registration</code> <code>bool</code> <p>Whether the registration of a new user requires verification.</p> <code>True</code>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.add_user","title":"add_user  <code>async</code>","text":"<pre><code>add_user(user, verify=False, activate=True)\n</code></pre> <p>Create a new user programmatically.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>SQLAUserT</code> <p>User model instance.</p> required <code>verify</code> <code>bool</code> <p>Set the user's verification status to this value.</p> <code>False</code> <code>activate</code> <code>bool</code> <p>Set the user's active status to this value.</p> <code>True</code>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.register","title":"register  <code>async</code>","text":"<pre><code>register(data, request=None)\n</code></pre> <p>Register a new user and optionally run custom business logic.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>User creation data transfer object.</p> required <code>request</code> <code>Request | None</code> <p>The litestar request that initiated the action.</p> <code>None</code>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(id_, load=None, execution_options=None)\n</code></pre> <p>Retrieve a user from the database by id.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID | int</code> <p>UUID corresponding to a user primary key.</p> required <code>load</code> <code>LoadSpec | None</code> <p>Set relationships to be loaded</p> <code>None</code> <code>execution_options</code> <code>dict[str, Any] | None</code> <p>Set default execution options</p> <code>None</code>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.get_user_by","title":"get_user_by  <code>async</code>","text":"<pre><code>get_user_by(load=None, execution_options=None, **kwargs)\n</code></pre> <p>Retrieve a user from the database by arbitrary keyword arguments.</p> <p>Parameters:</p> Name Type Description Default <code>load</code> <code>LoadSpec | None</code> <p>Set relationships to be loaded</p> <code>None</code> <code>execution_options</code> <code>dict[str, Any] | None</code> <p>Set default execution options</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Keyword arguments to pass as filters.</p> <code>{}</code> <p>Examples:</p> <pre><code>service = UserService(...)\njohn = await service.get_one(email=\"john@example.com\")\n</code></pre>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.update_user","title":"update_user  <code>async</code>","text":"<pre><code>update_user(data)\n</code></pre> <p>Update arbitrary user attributes in the database.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>SQLAUserT</code> <p>User update data transfer object.</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.delete_user","title":"delete_user  <code>async</code>","text":"<pre><code>delete_user(id_)\n</code></pre> <p>Delete a user from the database.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID | int</code> <p>UUID corresponding to a user primary key.</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.authenticate","title":"authenticate  <code>async</code>","text":"<pre><code>authenticate(data, request=None)\n</code></pre> <p>Authenticate a user.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>User authentication data transfer object.</p> required <code>request</code> <code>Request | None</code> <p>The litestar request that initiated the action.</p> <code>None</code>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.generate_token","title":"generate_token","text":"<pre><code>generate_token(user_id, aud)\n</code></pre> <p>Generate a limited time valid JWT.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>UUID | int</code> <p>ID of the user to provide the token to.</p> required <code>aud</code> <code>str</code> <p>Context of the token</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.initiate_verification","title":"initiate_verification  <code>async</code>","text":"<pre><code>initiate_verification(user)\n</code></pre> <p>Initiate the user verification flow.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>SQLAUserT</code> <p>The user requesting verification.</p> required Notes <ul> <li>The user verification flow is not initiated when <code>require_verification_on_registration</code> is set to <code>False</code>.</li> </ul>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.send_verification_token","title":"send_verification_token  <code>async</code>","text":"<pre><code>send_verification_token(user, token)\n</code></pre> <p>Execute custom logic to send the verification token to the relevant user.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>SQLAUserT</code> <p>The user requesting verification.</p> required <code>token</code> <code>str</code> <p>An encoded JWT bound to verification.</p> required <p>Notes: - Develepors need to override this method to facilitate sending the token via email, sms etc. - This method is not invoked when <code>require_verification_on_registration</code> is set to <code>False</code>.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.verify","title":"verify  <code>async</code>","text":"<pre><code>verify(encoded_token, request=None)\n</code></pre> <p>Verify a user with the given JWT.</p> <p>Parameters:</p> Name Type Description Default <code>encoded_token</code> <code>str</code> <p>An encoded JWT bound to verification.</p> required <code>request</code> <code>Request | None</code> <p>The litestar request that initiated the action.</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidTokenException</code> <p>If the token is expired or tampered with.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.initiate_password_reset","title":"initiate_password_reset  <code>async</code>","text":"<pre><code>initiate_password_reset(email)\n</code></pre> <p>Initiate the password reset flow.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Email of the user who has forgotten their password.</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.send_password_reset_token","title":"send_password_reset_token  <code>async</code>","text":"<pre><code>send_password_reset_token(user, token)\n</code></pre> <p>Execute custom logic to send the password reset token to the relevant user.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>SQLAUserT</code> <p>The user requesting the password reset.</p> required <code>token</code> <code>str</code> <p>An encoded JWT bound to the password reset flow.</p> required <p>Notes: - Develepors need to override this method to facilitate sending the token via email, sms etc.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.reset_password","title":"reset_password  <code>async</code>","text":"<pre><code>reset_password(encoded_token, password)\n</code></pre> <p>Reset a user's password given a valid JWT.</p> <p>Parameters:</p> Name Type Description Default <code>encoded_token</code> <code>str</code> <p>An encoded JWT bound to the password reset flow.</p> required <code>password</code> <code>str</code> <p>The new password to hash and store.</p> required <p>Raises:</p> Type Description <code>InvalidTokenException</code> <p>If the token has expired or been tampered with.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.pre_login_hook","title":"pre_login_hook  <code>async</code>","text":"<pre><code>pre_login_hook(data, request=None)\n</code></pre> <p>Execute custom logic to run custom business logic prior to authenticating a user.</p> <p>Useful for authentication checks against external sources, eg. current membership validity or blacklists, etc Must return <code>False</code> or raise a custom exception to cancel authentication.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>AuthenticationSchema</code> <p>Authentication data transfer object.</p> required <code>request</code> <code>Request | None</code> <p>The litestar request that initiated the action.</p> <code>None</code> Notes <p>Uncaught exceptions in this method will break the authentication process.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.post_login_hook","title":"post_login_hook  <code>async</code>","text":"<pre><code>post_login_hook(user, request=None)\n</code></pre> <p>Execute custom logic to run custom business logic after authenticating a user.</p> <p>Useful for eg. updating a login counter, updating last known user IP address, etc.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>SQLAUserT</code> <p>The user who has authenticated.</p> required <code>request</code> <code>Request | None</code> <p>The litestar request that initiated the action.</p> <code>None</code> Notes <p>Uncaught exceptions in this method will break the authentication process.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.pre_registration_hook","title":"pre_registration_hook  <code>async</code>","text":"<pre><code>pre_registration_hook(data, request=None)\n</code></pre> <p>Execute custom logic to run custom business logic prior to registering a user.</p> <p>Useful for authorization checks against external sources, eg. membership API or blacklists, etc.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>User creation data transfer object</p> required <code>request</code> <code>Request | None</code> <p>The litestar request that initiated the action.</p> <code>None</code> <p>Notes: - Uncaught exceptions in this method will result in failed registration attempts.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.post_registration_hook","title":"post_registration_hook  <code>async</code>","text":"<pre><code>post_registration_hook(user, request=None)\n</code></pre> <p>Execute custom logic to run custom business logic after registering a user.</p> <p>Useful for updating external datasets, sending welcome messages etc.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>SQLAUserT</code> <p>User ORM instance.</p> required <code>request</code> <code>Request | None</code> <p>The litestar request that initiated the action.</p> <code>None</code> <p>Notes: - Uncaught exceptions in this method could result in returning a HTTP 500 status code while successfully creating the user in the database.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.post_verification_hook","title":"post_verification_hook  <code>async</code>","text":"<pre><code>post_verification_hook(user, request=None)\n</code></pre> <p>Execute custom logic to run custom business logic after a user has verified details.</p> <p>Useful for eg. updating sales lead data, etc.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>SQLAUserT</code> <p>User ORM instance.</p> required <code>request</code> <code>Request | None</code> <p>The litestar request that initiated the action.</p> <code>None</code> <p>Notes: - Uncaught exceptions in this method could result in returning a HTTP 500 status code while successfully validating the user.</p>"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.get_role","title":"get_role  <code>async</code>","text":"<pre><code>get_role(id_)\n</code></pre> <p>Retrieve a role by id.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID | int</code> <p>ID of the role.</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.get_role_by_name","title":"get_role_by_name  <code>async</code>","text":"<pre><code>get_role_by_name(name)\n</code></pre> <p>Retrieve a role by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the role.</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.add_role","title":"add_role  <code>async</code>","text":"<pre><code>add_role(data)\n</code></pre> <p>Add a new role to the database.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>SQLARoleT</code> <p>A role creation data transfer object.</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.update_role","title":"update_role  <code>async</code>","text":"<pre><code>update_role(id_, data)\n</code></pre> <p>Update a role in the database.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID | int</code> <p>UUID corresponding to the role primary key.</p> required <code>data</code> <code>SQLARoleT</code> <p>A role update data transfer object.</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.delete_role","title":"delete_role  <code>async</code>","text":"<pre><code>delete_role(id_)\n</code></pre> <p>Delete a role from the database.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID | int</code> <p>UUID corresponding to the role primary key.</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.assign_role","title":"assign_role  <code>async</code>","text":"<pre><code>assign_role(user_id, role_id)\n</code></pre> <p>Add a role to a user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>UUID | int</code> <p>ID of the user to receive the role.</p> required <code>role_id</code> <code>UUID | int</code> <p>ID of the role to add to the user.</p> required"},{"location":"reference/1-user-service/#litestar_users.service.BaseUserService.revoke_role","title":"revoke_role  <code>async</code>","text":"<pre><code>revoke_role(user_id, role_id)\n</code></pre> <p>Revoke a role from a user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>UUID | int</code> <p>ID of the user to revoke the role from.</p> required <code>role_id</code> <code>UUID | int</code> <p>ID of the role to revoke.</p> required"},{"location":"reference/2-route-handler-configs/","title":"Route Handler Configurations","text":""},{"location":"reference/2-route-handler-configs/#litestar_users.config.AuthHandlerConfig","title":"litestar_users.config.AuthHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for user authentication route handlers.</p> <p>Passing an instance to <code>LitestarUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.AuthHandlerConfig.login_path","title":"login_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>login_path = '/login'\n</code></pre> <p>The path for the user authentication/login route.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.AuthHandlerConfig.logout_path","title":"logout_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>logout_path = '/logout'\n</code></pre> <p>The path for the logout route.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.AuthHandlerConfig.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.CurrentUserHandlerConfig","title":"litestar_users.config.CurrentUserHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the current-user route handler.</p> <p>Passing an instance to <code>LitestarUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.CurrentUserHandlerConfig.path","title":"path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path = '/users/me'\n</code></pre> <p>The path to get or update the currently logged-in user.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.CurrentUserHandlerConfig.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.PasswordResetHandlerConfig","title":"litestar_users.config.PasswordResetHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the forgot-password and reset-password route handlers.</p> <p>Passing an instance to <code>LitestarUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.PasswordResetHandlerConfig.forgot_path","title":"forgot_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>forgot_path = '/forgot-password'\n</code></pre> <p>The path for the forgot-password route.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.PasswordResetHandlerConfig.reset_path","title":"reset_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reset_path = '/reset-password'\n</code></pre> <p>The path for the reset-password route.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.PasswordResetHandlerConfig.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.RegisterHandlerConfig","title":"litestar_users.config.RegisterHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the user registration route handler.</p> <p>Passing an instance to <code>LitestarUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.RegisterHandlerConfig.path","title":"path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path = '/register'\n</code></pre> <p>The path for the registration/signup route.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.RegisterHandlerConfig.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.RoleManagementHandlerConfig","title":"litestar_users.config.RoleManagementHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the role management route handlers.</p> <p>Passing an instance to <code>LitestarUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.RoleManagementHandlerConfig.path_prefix","title":"path_prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path_prefix = '/users/roles'\n</code></pre> <p>The prefix for the router path.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.RoleManagementHandlerConfig.assign_role_path","title":"assign_role_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>assign_role_path = '/assign'\n</code></pre> <p>The path for the role assignment router.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.RoleManagementHandlerConfig.revoke_role_path","title":"revoke_role_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>revoke_role_path = '/revoke'\n</code></pre> <p>The path for the role revokement router.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.RoleManagementHandlerConfig.guards","title":"guards  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>guards = field(default_factory=list)\n</code></pre> <p>A list of callable Guards that determines who is authorized to manage roles.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.RoleManagementHandlerConfig.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.UserManagementHandlerConfig","title":"litestar_users.config.UserManagementHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for user management (read, update, delete) route handlers.</p> <p>Passing an instance to <code>LitestarUsersConfig</code> will automatically take care of handler registration on the app.</p> <p>Note: - These routes make use of Litestar <code>Guard</code>s to require authorization. Callers require admin or similar privileges.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.UserManagementHandlerConfig.path_prefix","title":"path_prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path_prefix = '/users'\n</code></pre> <p>The prefix for the router path.</p> <p>By default, the path will be suffixed with <code>'/{user_id:&lt;type&gt;}'</code>.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.UserManagementHandlerConfig.guards","title":"guards  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>guards = field(default_factory=list)\n</code></pre> <p>A list of callable Guards that determines who is authorized to manage other users.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.UserManagementHandlerConfig.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.VerificationHandlerConfig","title":"litestar_users.config.VerificationHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the user verification route handler.</p> <p>Passing an instance to <code>LitestarUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.VerificationHandlerConfig.path","title":"path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path = '/verify'\n</code></pre> <p>The path for the verification route.</p>"},{"location":"reference/2-route-handler-configs/#litestar_users.config.VerificationHandlerConfig.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"usage/0-configuration/","title":"Configuration","text":"<p>Litestar Users enables you to set up pre-configured authentication and user management route handlers in minutes. The LitestarUsers accepts a config object in the form of LitestarUsersConfig. The config requires database models, DTOs, a user service and one or more route handler configs.</p>"},{"location":"usage/0-configuration/#minimal-example","title":"Minimal example","text":"<p>A minimal example with registration, verification and login facilities:</p> <pre><code>from dataclasses import dataclass\nfrom typing import Any\n\nimport uvicorn\nfrom advanced_alchemy.base import UUIDBase\nfrom litestar import Litestar\nfrom advanced_alchemy.extensions.litestar.dto import SQLAlchemyDTO, SQLAlchemyDTOConfig\nfrom advanced_alchemy.extensions.litestar.plugins import (\n    SQLAlchemyAsyncConfig,\n    SQLAlchemyInitPlugin,\n)\nfrom litestar.dto import DataclassDTO\nfrom litestar.security.session_auth import SessionAuth\n\nfrom litestar_users import LitestarUsersPlugin, LitestarUsersConfig\nfrom litestar_users.adapter.sqlalchemy.mixins import SQLAlchemyUserMixin\nfrom litestar_users.config import (\n    AuthHandlerConfig,\n    RegisterHandlerConfig,\n    VerificationHandlerConfig,\n)\nfrom litestar_users.service import BaseUserService\n\nENCODING_SECRET = \"1234567890abcdef\"  # noqa: S105\nDATABASE_URL = \"sqlite+aiosqlite:///\"\n\n\nclass User(UUIDBase, SQLAlchemyUserMixin):\n    \"\"\"User model.\"\"\"\n\n\n@dataclass\nclass UserRegistrationSchema:\n    email: str\n    password: str\n\n\nclass UserRegistrationDTO(DataclassDTO[UserRegistrationSchema]):\n    \"\"\"User registration DTO.\"\"\"\n\n\nclass UserReadDTO(SQLAlchemyDTO[User]):\n    config = SQLAlchemyDTOConfig(exclude={\"password_hash\"})\n\n\nclass UserUpdateDTO(SQLAlchemyDTO[User]):\n    config = SQLAlchemyDTOConfig(exclude={\"password_hash\"}, partial=True)\n\n\nclass UserService(BaseUserService[User, Any]):  # type: ignore[type-var]\n    async def post_registration_hook(self, user: User) -&gt; None:\n        print(f\"User &lt;{user.email}&gt; has registered!\")\n\n\nsqlalchemy_config = SQLAlchemyAsyncConfig(\n    connection_string=DATABASE_URL,\n    session_dependency_key=\"session\",\n)\n\nlitestar_users = LitestarUsersPlugin(\n    config=LitestarUsersConfig(\n        auth_backend_class=SessionAuth,\n        secret=ENCODING_SECRET,\n        user_model=User,  # pyright: ignore\n        user_read_dto=UserReadDTO,\n        user_registration_dto=UserRegistrationDTO,\n        user_update_dto=UserUpdateDTO,\n        user_service_class=UserService,  # pyright: ignore\n        auto_commit_transactions=False,\n        auth_handler_config=AuthHandlerConfig(),\n        register_handler_config=RegisterHandlerConfig(),\n        verification_handler_config=VerificationHandlerConfig(),\n    )\n)\n\napp = Litestar(\n    plugins=[SQLAlchemyInitPlugin(config=sqlalchemy_config), litestar_users],\n    route_handlers=[],\n)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app=\"basic:app\", reload=True)\n</code></pre> <p>Note</p> <p>Aside from the pre-configured public routes provided by Litestar-Users, all the routes on your application will require authentication unless specified otherwise in LitestarUsersConfig.auth_exclude_paths</p> <p>Note</p> <p>Litestar-Users requires the use of a corresponding <code>Litestar</code> plugin for database management.</p>"},{"location":"usage/1-database-models/","title":"Database models","text":""},{"location":"usage/1-database-models/#the-user-model","title":"The user model","text":"<p>The SQLAlchemyUserMixin provides the following columns:</p> <ul> <li><code>email</code>: str</li> <li><code>password_hash</code>: str</li> <li><code>is_active</code>: bool</li> <li><code>is_verified</code>: bool</li> </ul>"},{"location":"usage/1-database-models/#sqlalchemy-user","title":"SQLAlchemy User","text":"<p>Important</p> <p>Litestar-Users is reliant on the SQLAlchemyPlugin for session management and dependency injection, this ensures that no more than one SQLAlchemy session is spun up per request lifecycle.</p> <pre><code>from advanced_alchemy.base import UUIDBase\nfrom litestar_users.adapter.sqlalchemy.mixins import SQLAlchemyUserMixin\n\n\nclass User(UUIDBase, SQLAlchemyUserMixin):\n    \"\"\"User model.\"\"\"\n</code></pre> <p>The user model can be extended arbitrarily:</p> <pre><code>from advanced_alchemy.base import UUIDBase\nfrom litestar_users.adapter.sqlalchemy.mixins import SQLAlchemyUserMixin\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped, mapped_column\n\n\nclass User(UUIDBase, SQLAlchemyUserMixin):\n    \"\"\"User model.\"\"\"\n\n    token_count: Mapped[int] = mapped_column(Integer())\n</code></pre> <p>Note</p> <p>You can skip the next section if you're not making use of Litestar User's built in RBAC.</p>"},{"location":"usage/1-database-models/#the-role-model","title":"The role model","text":"<p>For RBAC (role based access control), additionally set up a <code>Role</code> model along with a user-role association table.</p> <p>Note</p> <p>You must set your own <code>User.roles</code> relationship and association table, since this is dependent on your own <code>__tablename__</code> definitions.</p>"},{"location":"usage/1-database-models/#sqlalchemy-role","title":"SQLAlchemy Role","text":"<pre><code>from uuid import UUID\nfrom advanced_alchemy.base import UUIDBase\nfrom litestar_users.adapter.sqlalchemy.mixins import (\n    SQLAlchemyUserMixin,\n    SQLAlchemyRoleMixin,\n)\nfrom sqlalchemy import ForeignKey, Uuid\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\n\nclass Role(UUIDBase, SQLAlchemyRoleMixin):\n    \"\"\"Role model.\"\"\"\n\n\nclass User(UUIDBase, SQLAlchemyUserMixin):\n    \"\"\"User model.\"\"\"\n\n    roles: Mapped[list[Role]] = relationship(\n        \"Role\", secondary=\"user_role\", lazy=\"selectin\"\n    )\n\n\nclass UserRole(UUIDBase):\n    \"\"\"User role association model.\"\"\"\n\n    user_id: Mapped[UUID] = mapped_column(Uuid(), ForeignKey(\"user.id\"))\n    role_id: Mapped[UUID] = mapped_column(Uuid(), ForeignKey(\"role.id\"))\n</code></pre> <p>Just as with the user model, you can define arbitrary custom columns:</p> <pre><code>from datetime import datetime\n\nfrom advanced_alchemy.base import UUIDBase\nfrom litestar_users.adapter.sqlalchemy.mixins import SQLAlchemyRoleMixin\nfrom sqlalchemy import DateTime\nfrom sqlalchemy.orm import Mapped, mapped_column\n\n\nclass Role(UUIDBase, SQLAlchemyRoleMixin):\n    created_at: Mapped[datetime] = mapped_column(DateTime(), default=datetime.now)\n</code></pre>"},{"location":"usage/2-data-transfer-objects/","title":"Data transfer objects","text":"<p>The user registration DTO can be an instance of either DataclassDTO, MsgspecDTO or PydanticDTO</p>"},{"location":"usage/2-data-transfer-objects/#example","title":"Example","text":"<pre><code>from dataclasses import dataclass\n\nfrom advanced_alchemy.extensions.litestar.dto import SQLAlchemyDTO, SQLAlchemyDTOConfig\nfrom litestar.dto import DataclassDTO\n\nfrom .models import User\n\n\n@dataclass\nclass UserRegistrationSchema:\n    email: str\n    password: str\n\n\nclass UserRegistrationDTO(DataclassDTO[UserRegistrationSchema]):\n    \"\"\"User registration DTO.\"\"\"\n\n\nclass UserReadDTO(SQLAlchemyDTO[User]):\n    config = SQLAlchemyDTOConfig(exclude={\"login_count\"})\n\n\nclass UserUpdateDTO(SQLAlchemyDTO[User]):\n    config = SQLAlchemyDTOConfig(exclude={\"login_count\"}, partial=True)\n</code></pre>"},{"location":"usage/3-the-user-service/","title":"The user service class","text":"<p>The <code>UserService</code> class is the interface for all user and role related operations. It is meant to be subclassed in order to configure how to deliver your application's verification and password recovery tokens.</p>"},{"location":"usage/3-the-user-service/#suggested-method-overrides","title":"Suggested method overrides","text":"<ul> <li><code>send_verification_token</code></li> <li><code>send_password_reset_token</code></li> </ul> <p>Note</p> <p>The method <code>send_verification_token</code> is used only when <code>require_verification_on_registration</code> is set to <code>True</code> (the default value). If no verification is required and <code>require_verification_on_registration</code> is set to <code>False</code>, the method will not be invoked.</p>"},{"location":"usage/3-the-user-service/#example","title":"Example","text":"<pre><code>from typing import Any\n\nfrom litestar_users.service import BaseUserService\n\nfrom local.models import User\nfrom local.services import EmailService\n\n\nclass UserService(BaseUserService[User, Any]):\n    async def send_verification_token(self, user: User, token: str) -&gt; None:\n        email_service = EmailService()\n        email_service.send(\n            email=user.email,\n            message=f\"Welcome! Your verification link is https://mysite.com/verify?token={token}\",\n        )\n</code></pre>"},{"location":"usage/3-the-user-service/#optional-method-overrides","title":"Optional method overrides","text":""},{"location":"usage/3-the-user-service/#pre_login_hook","title":"<code>pre_login_hook</code>","text":"<p>Executes custom asynchronous code before the authentication process proceeds. If you have business requirements to halt the authentication process for any reason, this would be a good place to do so. Simply raise an exception (ideally you'd map this to a HTTP 4xx response)</p>"},{"location":"usage/3-the-user-service/#post_login_hook","title":"<code>post_login_hook</code>","text":"<p>Executes custom asynchronous code after the authentication process has succeeded. This is the ideal location to update for example a user's login count or last login IP address.</p>"},{"location":"usage/3-the-user-service/#pre_registration_hook","title":"<code>pre_registration_hook</code>","text":"<p>Executes custom asynchronous code before the user registration process proceeds. If you have business requirements to halt the registration process for any reason, this would be a good place to do so. Simply raise an exception (ideally you'd map this to a HTTP 4xx response)</p>"},{"location":"usage/3-the-user-service/#post_registration_hook","title":"<code>post_registration_hook</code>","text":"<p>Executes custom asynchronous code after the registration process has succeeded. This could be used to send users a \"welcoming email\" describing the application verification process, etc.</p>"},{"location":"usage/3-the-user-service/#post_verification_hook","title":"<code>post_verification_hook</code>","text":"<p>Executes custom asynchronous code after a user has successfully verified their account. An example use is updating external sources with active user metrics, etc.</p>"},{"location":"usage/4-route-handler-configs/","title":"Route handler configs","text":"<p>Simply adding any of the configuration classes below to <code>LitestarUsersConfig</code> will register the relevant route handlers on your Litestar application. All route paths are configurable via these interfaces:</p>"},{"location":"usage/4-route-handler-configs/#authhandlerconfig","title":"<code>AuthHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>login</code>: Allows users to authenticate.</li> <li><code>logout</code>: Allows authenticated users to logout. Not available when the authentication backend is JWT based.</li> </ul>"},{"location":"usage/4-route-handler-configs/#currentuserhandlerconfig","title":"<code>CurrentUserHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>get_current_user</code>: Get info on the currently authenticated user.</li> <li><code>update_current_user</code>: Update the currently authenticated user's info.</li> </ul>"},{"location":"usage/4-route-handler-configs/#passwordresethandlerconfig","title":"<code>PasswordResetHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>forgot_password</code>: Inititiates the password reset flow. Always returns a HTTP 2XX status code.</li> <li><code>reset_password</code>: Reset a user's password, given a valid reset token.</li> </ul>"},{"location":"usage/4-route-handler-configs/#registerhandlerconfig","title":"<code>RegisterHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>register</code> (aka signup). By default, newly registered users will need to verify their account before they can proceed to login. This behavior can be changed setting <code>require_verification_on_registration</code> to <code>False</code> to disable verification for new users.</li> </ul>"},{"location":"usage/4-route-handler-configs/#rolemanagementhandlerconfig","title":"<code>RoleManagementHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>create_role</code>: Create a new role.</li> <li><code>update_role</code>: Update a role.</li> <li><code>delete_role</code>: Delete a role from the database.</li> <li><code>assign_role</code>: Assign an existing role to an existing user.</li> <li><code>revoke_role</code>: Revoke an existing role from an existing user.</li> </ul>"},{"location":"usage/4-route-handler-configs/#usermanagementhandlerconfig","title":"<code>UserManagementHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>get_user</code>: Get user info.</li> <li><code>update_user</code>: Update a user's info.</li> <li><code>delete_user</code>: Delete a user from the database.</li> </ul>"},{"location":"usage/4-route-handler-configs/#verificationhandlerconfig","title":"<code>VerificationHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>verify</code>: Update a user's <code>is_verified</code> status to <code>True</code>, given a valid token.</li> </ul>"},{"location":"usage/5-role-based-guards/","title":"Role based route guards","text":"<p>Litestar-Users provides the following guard provider functions:</p> <ul> <li><code>roles_accepted</code>: The user must have at least one of the listed roles in order to access the resource.</li> <li><code>roles_required</code>: The user must have all the listed roles in order to access the resource.</li> </ul> <p>Example:</p> <pre><code>from typing import Any\n\nfrom litestar import get\nfrom litestar_users.guards import roles_accepted, roles_required\n\n\n@get(\"/sensitive-info\", guards=[roles_accepted(\"admin\", \"accountant\")])\ndef sensitive_info() -&gt; Any:\n    \"\"\"Accessible only by users with admin or accountant roles.\"\"\"\n    ...\n\n\n@get(\"/super-sensitive-info\", guards=[roles_required(\"admin\", \"accountant\")])\ndef extra_sensitive_info() -&gt; Any:\n    \"\"\"Accessible only by users with both admin and accountant roles.\"\"\"\n    ...\n</code></pre> <p>Important</p> <p>Usually, guard params in Litestar should not be invoked since they are called internally. We do invoke the <code>roles_accepted</code> and <code>roles_required</code> functions though, as they return callables which meet the requirements.</p>"},{"location":"usage/6-command-line-interface/","title":"Command line interface","text":"<p>Litestar Users provides a command line interface (CLI) to conveniently set up initial users in the database. It is built on top of the Litestar CLI API, and as such uses the <code>litestar</code> command as the main entrypoint. See Litestar CLI documentation for more details.</p>"},{"location":"usage/6-command-line-interface/#commands","title":"Commands","text":""},{"location":"usage/6-command-line-interface/#create-user","title":"create-user","text":"<p>Create a new user in the database.</p>"},{"location":"usage/6-command-line-interface/#litestar-users-create-user-options","title":"<code>litestar users create-user [OPTIONS]</code>","text":"<p>Options</p> <p><code>--email &lt;email&gt;</code></p> <p>The user's email address.</p> <p><code>--password &lt;password&gt;</code></p> <p>The user's login password.</p> <p><code>--is-verified</code></p> <p>Set the user as being verified.</p> <p><code>--is-active</code></p> <p>Set the user as active.</p> <p><code>--id &lt;id&gt;</code></p> <p>The user ID.</p> <p><code>-b, --bool-attrs &lt;key=value&gt;</code></p> <p>Set one or more custom boolean attribute key-value pairs, e.g. <code>receive_notifications=True</code>. Allowed values are case insensitive variants of <code>1</code>, <code>true</code>, <code>t</code>, <code>yes</code> and <code>y</code> Any other values will equate to <code>False</code></p> <p><code>-f, --float-attrs &lt;key=value&gt;</code></p> <p>Set one or more custom boolean attribute key-value pairs, e.g. <code>score=7.8</code>.</p> <p><code>-i, --int-attrs &lt;key=value&gt;</code></p> <p>Set one or more custom integer attribute key-value pairs, e.g. <code>remaining_tokens=4</code></p> <p><code>-s, --str-attrs &lt;key=value&gt;</code></p> <p>Set one or more custom string attribute key-value pairs, e.g. <code>name=Saturn</code></p>"},{"location":"usage/6-command-line-interface/#create-role","title":"create-role","text":"<p>Create a new role in the database.</p> <p><code>litestar users create-role [OPTIONS]</code></p> <p>Options</p> <p><code>--name &lt;name&gt;</code></p> <p>The role name.</p> <p><code>--description &lt;description&gt;</code></p> <p>The role description.</p>"},{"location":"usage/6-command-line-interface/#assign-role","title":"assign-role","text":"<p>Assign a role to a user.</p>"},{"location":"usage/6-command-line-interface/#litestar-users-assign-role-options","title":"<code>litestar users assign-role [OPTIONS]</code>","text":"<p>Options</p> <p><code>--email &lt;email&gt;</code></p> <p>The user's email address.</p> <p><code>--role &lt;role&gt;</code></p> <p>The name of the role to assign.</p>"}]}